import { GetStaticPaths, GetStaticProps } from 'next'
import Head from 'next/head'
import Link from 'next/link'
import Image from 'next/image'
import { useState } from 'react'
import { ChevronRightIcon, FunnelIcon } from '@heroicons/react/24/outline'
import { supabase } from '../../lib/supabase'
import type { Brand, Product } from '../../lib/supabase'

interface BrandPageProps {
  brand: Brand
  products: Product[]
  categories: string[]
}

export default function BrandPage({ brand, products, categories }: BrandPageProps) {
  const [selectedCategory, setSelectedCategory] = useState<string>('')
  const [searchQuery, setSearchQuery] = useState('')

  const filteredProducts = products.filter(product => {
    const matchesCategory = !selectedCategory || product.category === selectedCategory
    const matchesSearch = !searchQuery || 
      product.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
      product.category.toLowerCase().includes(searchQuery.toLowerCase())
    return matchesCategory && matchesSearch
  })

  const categoryNames: Record<string, string> = {
    'fridge': 'Refrigerators',
    'washing-machine': 'Washing Machines',
    'dryer': 'Dryers',
    'tv': 'TVs & Electronics',
    'dishwasher': 'Dishwashers',
    'oven': 'Ovens & Ranges',
    'microwave': 'Microwaves',
    'air-conditioner': 'Air Conditioners'
  }

  return (
    <>
      <Head>
        <title>{brand.name} Manuals - ApplianceManuals</title>
        <meta name="description" content={`Find manuals for ${brand.name} appliances. Download user guides, installation manuals, and service documentation.`} />
      </Head>

      <div className="min-h-screen bg-gray-50">
        {/* Header */}
        <header className="bg-white shadow-sm border-b">
          <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            <div className="flex justify-between items-center h-16">
              <Link href="/" className="text-2xl font-bold text-primary-600">
                ApplianceManuals
              </Link>
              <nav className="hidden md:flex space-x-8">
                <Link href="/brands" className="text-gray-600 hover:text-primary-600 transition-colors">
                  Brands
                </Link>
                <Link href="/categories" className="text-gray-600 hover:text-primary-600 transition-colors">
                  Categories
                </Link>
              </nav>
            </div>
          </div>
        </header>

        {/* Breadcrumb */}
        <nav className="bg-white border-b">
          <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4">
            <div className="flex items-center space-x-2 text-sm text-gray-600">
              <Link href="/" className="hover:text-primary-600">Home</Link>
              <ChevronRightIcon className="h-4 w-4" />
              <Link href="/brands" className="hover:text-primary-600">Brands</Link>
              <ChevronRightIcon className="h-4 w-4" />
              <span className="text-gray-900">{brand.name}</span>
            </div>
          </div>
        </nav>

        {/* Brand Header */}
        <section className="bg-white">
          <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
            <div className="flex items-start space-x-6">
              {brand.logo_url ? (
                <div className="w-24 h-24 relative flex-shrink-0">
                  <Image
                    src={brand.logo_url}
                    alt={`${brand.name} logo`}
                    fill
                    className="object-contain"
                  />
                </div>
              ) : (
                <div className="w-24 h-24 bg-primary-100 rounded-xl flex items-center justify-center flex-shrink-0">
                  <span className="text-primary-600 font-bold text-2xl">
                    {brand.name.charAt(0)}
                  </span>
                </div>
              )}
              
              <div className="flex-1">
                <h1 className="text-4xl font-bold text-gray-900 mb-4">{brand.name}</h1>
                {brand.description && (
                  <p className="text-lg text-gray-600 mb-6">{brand.description}</p>
                )}
                <div className="flex items-center text-sm text-gray-500">
                  <span>{products.length} products available</span>
                </div>
              </div>
            </div>
          </div>
        </section>

        {/* Filters */}
        <section className="bg-white border-b">
          <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6">
            <div className="flex flex-col sm:flex-row gap-4">
              {/* Search */}
              <div className="flex-1">
                <input
                  type="text"
                  placeholder="Search products..."
                  value={searchQuery}
                  onChange={(e) => setSearchQuery(e.target.value)}
                  className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500"
                />
              </div>
              
              {/* Category Filter */}
              <div className="relative">
                <select
                  value={selectedCategory}
                  onChange={(e) => setSelectedCategory(e.target.value)}
                  className="appearance-none bg-white border border-gray-300 rounded-lg px-4 py-2 pr-10 focus:ring-2 focus:ring-primary-500 focus:border-primary-500"
                >
                  <option value="">All Categories</option>
                  {categories.map(category => (
                    <option key={category} value={category}>
                      {categoryNames[category] || category}
                    </option>
                  ))}
                </select>
                <FunnelIcon className="absolute right-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400 pointer-events-none" />
              </div>
            </div>
          </div>
        </section>

        {/* Products Grid */}
        <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
          {filteredProducts.length === 0 ? (
            <div className="text-center py-12">
              <p className="text-gray-600 text-lg">No products found matching your criteria.</p>
              <button
                onClick={() => {
                  setSelectedCategory('')
                  setSearchQuery('')
                }}
                className="mt-4 text-primary-600 hover:text-primary-700 font-medium"
              >
                Clear filters
              </button>
            </div>
          ) : (
            <div className="grid sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
              {filteredProducts.map((product) => (
                <Link
                  key={product.id}
                  href={`/product/${product.slug}`}
                  className="bg-white rounded-xl shadow-sm hover:shadow-md transition-shadow border border-gray-200 overflow-hidden"
                >
                  {product.image_url ? (
                    <div className="aspect-video relative">
                      <Image
                        src={product.image_url}
                        alt={product.name}
                        fill
                        className="object-cover"
                      />
                    </div>
                  ) : (
                    <div className="aspect-video bg-gray-100 flex items-center justify-center">
                      <span className="text-gray-400 text-sm">No Image</span>
                    </div>
                  )}
                  
                  <div className="p-6">
                    <div className="text-xs text-primary-600 font-medium mb-2 uppercase tracking-wide">
                      {categoryNames[product.category] || product.category}
                    </div>
                    <h3 className="font-semibold text-gray-900 mb-2">{product.name}</h3>
                    {product.description && (
                      <p className="text-sm text-gray-600 line-clamp-2">{product.description}</p>
                    )}
                  </div>
                </Link>
              ))}
            </div>
          )}
        </main>
      </div>
    </>
  )
}

export const getStaticPaths: GetStaticPaths = async () => {
  const { data: brands } = await supabase
    .from('brands')
    .select('slug')

  const paths = brands?.map(brand => ({
    params: { slug: brand.slug }
  })) || []

  return {
    paths,
    fallback: 'blocking'
  }
}

export const getStaticProps: GetStaticProps = async ({ params }) => {
  if (!params?.slug) {
    return { notFound: true }
  }

  try {
    // Fetch brand
    const { data: brand } = await supabase
      .from('brands')
      .select('*')
      .eq('slug', params.slug)
      .single()

    if (!brand) {
      return { notFound: true }
    }

    // Fetch products for this brand
    const { data: products } = await supabase
      .from('products')
      .select('*')
      .eq('brand_id', brand.id)
      .order('name')

    // Get unique categories
    const categories = [...new Set(products?.map(p => p.category) || [])]

    return {
      props: {
        brand,
        products: products || [],
        categories
      },
      revalidate: 3600
    }
  } catch (error) {
    console.error('Error fetching brand:', error)
    return { notFound: true }
  }
}
